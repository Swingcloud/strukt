defmodule Strukt.Autogenerate do
  @moduledoc false

  defstruct [:entity, :keys, :attr, :info]

  @compile {:inline, [get: 1]}

  @doc """
  Returns metadata about the given module's primary keys and autogenerated fields
  """
  def get(module) when is_atom(module) do
    module.__schema__(:autogenerate)
    |> Enum.flat_map(fn {fields, {_m, _f, _a} = mfa} ->
      Enum.map(fields, &{&1, mfa})
    end)
  end

  @doc """
  Given an entity and its autogenerated field metadata (see above), this function generates
  any autogenerated key values and returns the updated entity struct.
  """
  def generate(%module{} = entity) do
    generate(entity, get(module))
  end

  # Nothing to do
  defp generate(entity, []), do: entity

  # One or more autogenerated fields are present
  defp generate(entity, [{key, {m, f, a}} | auto]) do
    entity
    |> Map.put(key, apply(m, f, a))
    |> generate(auto)
  end
end
